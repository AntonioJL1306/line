
Seguidor_de_linea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a69  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000860  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ce  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000205  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 31       	cpi	r26, 0x16	; 22
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  88:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
#define MOTOR_RIGHT_IN3 PIND4
#define MOTOR_RIGHT_IN4 PIND7

void setup() {
	// Configurar pines de PWM como salida
	DDRD |= (1 << MOTOR_LEFT_PWM) | (1 << MOTOR_RIGHT_PWM);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 66       	ori	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
	// Configurar pines de dirección como salida
	DDRD |= (1 << MOTOR_LEFT_IN1) | (1 << MOTOR_LEFT_IN2) | (1 << MOTOR_RIGHT_IN3) | (1 << MOTOR_RIGHT_IN4);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8c 69       	ori	r24, 0x9C	; 156
  9a:	8a b9       	out	0x0a, r24	; 10

	// Configurar Timer0 para PWM, modo Fast PWM, prescaler 64
	TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0A1) | (1 << COM0B1);
  9c:	83 ea       	ldi	r24, 0xA3	; 163
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	85 bd       	out	0x25, r24	; 37
	sensors_init();
  a4:	0e 94 21 01 	call	0x242	; 0x242 <sensors_init>
	pid_init(2.5, 0.05, 3); // Valores ajustados para mayor velocidad y estabilidad
  a8:	43 e0       	ldi	r20, 0x03	; 3
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <pid_init>
	sei();
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <setMotorSpeed>:
}

void setMotorSpeed(int16_t leftSpeed, int16_t rightSpeed) {
	if (leftSpeed > 0) {
  bc:	18 16       	cp	r1, r24
  be:	19 06       	cpc	r1, r25
  c0:	3c f4       	brge	.+14     	; 0xd0 <setMotorSpeed+0x14>
		PORTD |= (1 << MOTOR_LEFT_IN1);
  c2:	2b b1       	in	r18, 0x0b	; 11
  c4:	24 60       	ori	r18, 0x04	; 4
  c6:	2b b9       	out	0x0b, r18	; 11
		PORTD &= ~(1 << MOTOR_LEFT_IN2);
  c8:	2b b1       	in	r18, 0x0b	; 11
  ca:	27 7f       	andi	r18, 0xF7	; 247
  cc:	2b b9       	out	0x0b, r18	; 11
  ce:	09 c0       	rjmp	.+18     	; 0xe2 <setMotorSpeed+0x26>
		} else {
		PORTD &= ~(1 << MOTOR_LEFT_IN1);
  d0:	2b b1       	in	r18, 0x0b	; 11
  d2:	2b 7f       	andi	r18, 0xFB	; 251
  d4:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1 << MOTOR_LEFT_IN2);
  d6:	2b b1       	in	r18, 0x0b	; 11
  d8:	28 60       	ori	r18, 0x08	; 8
  da:	2b b9       	out	0x0b, r18	; 11
		leftSpeed = -leftSpeed;
  dc:	91 95       	neg	r25
  de:	81 95       	neg	r24
  e0:	91 09       	sbc	r25, r1
	}
	if (rightSpeed > 0) {
  e2:	16 16       	cp	r1, r22
  e4:	17 06       	cpc	r1, r23
  e6:	3c f4       	brge	.+14     	; 0xf6 <setMotorSpeed+0x3a>
		PORTD |= (1 << MOTOR_RIGHT_IN3);
  e8:	2b b1       	in	r18, 0x0b	; 11
  ea:	20 61       	ori	r18, 0x10	; 16
  ec:	2b b9       	out	0x0b, r18	; 11
		PORTD &= ~(1 << MOTOR_RIGHT_IN4);
  ee:	2b b1       	in	r18, 0x0b	; 11
  f0:	2f 77       	andi	r18, 0x7F	; 127
  f2:	2b b9       	out	0x0b, r18	; 11
  f4:	09 c0       	rjmp	.+18     	; 0x108 <setMotorSpeed+0x4c>
		} else {
		PORTD &= ~(1 << MOTOR_RIGHT_IN3);
  f6:	2b b1       	in	r18, 0x0b	; 11
  f8:	2f 7e       	andi	r18, 0xEF	; 239
  fa:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1 << MOTOR_RIGHT_IN4);
  fc:	2b b1       	in	r18, 0x0b	; 11
  fe:	20 68       	ori	r18, 0x80	; 128
 100:	2b b9       	out	0x0b, r18	; 11
		rightSpeed = -rightSpeed;
 102:	71 95       	neg	r23
 104:	61 95       	neg	r22
 106:	71 09       	sbc	r23, r1
	}

	OCR0A = (leftSpeed > 255) ? 255 : (leftSpeed < 0) ? 0 : leftSpeed;
 108:	8f 3f       	cpi	r24, 0xFF	; 255
 10a:	91 05       	cpc	r25, r1
 10c:	09 f0       	breq	.+2      	; 0x110 <setMotorSpeed+0x54>
 10e:	2c f4       	brge	.+10     	; 0x11a <setMotorSpeed+0x5e>
 110:	99 23       	and	r25, r25
 112:	24 f4       	brge	.+8      	; 0x11c <setMotorSpeed+0x60>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <setMotorSpeed+0x60>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	87 bd       	out	0x27, r24	; 39
	OCR0B = (rightSpeed > 255) ? 255 : (rightSpeed < 0) ? 0 : rightSpeed;
 11e:	6f 3f       	cpi	r22, 0xFF	; 255
 120:	71 05       	cpc	r23, r1
 122:	09 f0       	breq	.+2      	; 0x126 <setMotorSpeed+0x6a>
 124:	2c f4       	brge	.+10     	; 0x130 <setMotorSpeed+0x74>
 126:	77 23       	and	r23, r23
 128:	24 f4       	brge	.+8      	; 0x132 <setMotorSpeed+0x76>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	01 c0       	rjmp	.+2      	; 0x132 <setMotorSpeed+0x76>
 130:	6f ef       	ldi	r22, 0xFF	; 255
 132:	68 bd       	out	0x28, r22	; 40
 134:	08 95       	ret

00000136 <main>:
}

int main(void) {
	setup();
 136:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1) {
		uint16_t* sensor_values = read_all_sensors();
 13a:	0e 94 3e 01 	call	0x27c	; 0x27c <read_all_sensors>
 13e:	fc 01       	movw	r30, r24

		// Asumiendo que los valores del sensor se mapean a un error
		int error = (sensor_values[0] * -3 + sensor_values[1] * -2 +
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
 144:	9c 01       	movw	r18, r24
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	82 0f       	add	r24, r18
 14c:	93 1f       	adc	r25, r19
 14e:	62 81       	ldd	r22, Z+2	; 0x02
 150:	73 81       	ldd	r23, Z+3	; 0x03
 152:	71 95       	neg	r23
 154:	61 95       	neg	r22
 156:	71 09       	sbc	r23, r1
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	68 1b       	sub	r22, r24
 15e:	79 0b       	sbc	r23, r25
		sensor_values[2] * -1 + sensor_values[3] * 1 +
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	95 81       	ldd	r25, Z+5	; 0x05
	setup();
	while (1) {
		uint16_t* sensor_values = read_all_sensors();

		// Asumiendo que los valores del sensor se mapean a un error
		int error = (sensor_values[0] * -3 + sensor_values[1] * -2 +
 164:	68 1b       	sub	r22, r24
 166:	79 0b       	sbc	r23, r25
		sensor_values[2] * -1 + sensor_values[3] * 1 +
 168:	86 81       	ldd	r24, Z+6	; 0x06
 16a:	97 81       	ldd	r25, Z+7	; 0x07
 16c:	86 0f       	add	r24, r22
 16e:	97 1f       	adc	r25, r23
		sensor_values[4] * 2 + sensor_values[5] * 3);
 170:	62 85       	ldd	r22, Z+10	; 0x0a
 172:	73 85       	ldd	r23, Z+11	; 0x0b
 174:	9b 01       	movw	r18, r22
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	62 0f       	add	r22, r18
 17c:	73 1f       	adc	r23, r19
 17e:	20 85       	ldd	r18, Z+8	; 0x08
 180:	31 85       	ldd	r19, Z+9	; 0x09
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	62 0f       	add	r22, r18
 188:	73 1f       	adc	r23, r19
 18a:	68 0f       	add	r22, r24
 18c:	79 1f       	adc	r23, r25

		// Calcular la corrección PID
		int correction = pid_calculate(0, error);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <pid_calculate>

		// Ajustar la velocidad de los motores
		int16_t baseSpeed = 100; // Incremento del valor base para mayor velocidad
		int16_t leftSpeed = baseSpeed - correction;
		int16_t rightSpeed = baseSpeed + correction;
 196:	bc 01       	movw	r22, r24
 198:	6c 59       	subi	r22, 0x9C	; 156
 19a:	7f 4f       	sbci	r23, 0xFF	; 255

		setMotorSpeed(leftSpeed, rightSpeed);
 19c:	24 e6       	ldi	r18, 0x64	; 100
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	48 1b       	sub	r20, r24
 1a4:	59 0b       	sbc	r21, r25
 1a6:	ca 01       	movw	r24, r20
 1a8:	0e 94 5e 00 	call	0xbc	; 0xbc <setMotorSpeed>
 1ac:	c6 cf       	rjmp	.-116    	; 0x13a <main+0x4>

000001ae <pid_init>:
static int kp, ki, kd;
static int previous_error = 0;
static int integral = 0;

void pid_init(int p, int i, int d) {
	kp = p;
 1ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <kp+0x1>
 1b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <kp>
	ki = i;
 1b6:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <ki+0x1>
 1ba:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <ki>
	kd = d;
 1be:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <kd+0x1>
 1c2:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <kd>
 1c6:	08 95       	ret

000001c8 <pid_calculate>:
}

int pid_calculate(int setpoint, int measured_value) {
	int error = setpoint - measured_value;
 1c8:	86 1b       	sub	r24, r22
 1ca:	97 0b       	sbc	r25, r23
	integral += error;
 1cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	28 0f       	add	r18, r24
 1d6:	39 1f       	adc	r19, r25
 1d8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	int derivative = error - previous_error;
 1e0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <previous_error>
 1e4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <previous_error+0x1>
 1e8:	bc 01       	movw	r22, r24
 1ea:	64 1b       	sub	r22, r20
 1ec:	75 0b       	sbc	r23, r21
	previous_error = error;
 1ee:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <previous_error+0x1>
 1f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <previous_error>

	return kp * error + ki * integral + kd * derivative;
 1f6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <kp>
 1fa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <kp+0x1>
 1fe:	8e 9f       	mul	r24, r30
 200:	a0 01       	movw	r20, r0
 202:	8f 9f       	mul	r24, r31
 204:	50 0d       	add	r21, r0
 206:	9e 9f       	mul	r25, r30
 208:	50 0d       	add	r21, r0
 20a:	11 24       	eor	r1, r1
 20c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ki>
 210:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ki+0x1>
 214:	2e 9f       	mul	r18, r30
 216:	c0 01       	movw	r24, r0
 218:	2f 9f       	mul	r18, r31
 21a:	90 0d       	add	r25, r0
 21c:	3e 9f       	mul	r19, r30
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	84 0f       	add	r24, r20
 224:	95 1f       	adc	r25, r21
 226:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <kd>
 22a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <kd+0x1>
 22e:	64 9f       	mul	r22, r20
 230:	90 01       	movw	r18, r0
 232:	65 9f       	mul	r22, r21
 234:	30 0d       	add	r19, r0
 236:	74 9f       	mul	r23, r20
 238:	30 0d       	add	r19, r0
 23a:	11 24       	eor	r1, r1
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	08 95       	ret

00000242 <sensors_init>:
#include "sensors.h"
#define NUM_SENSORS 6

void sensors_init() {
	// Configurar ADC
	ADMUX = (1 << REFS0); // Referencia AVcc
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2); // Habilitar ADC, Prescaler 16
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 24e:	08 95       	ret

00000250 <start_adc_conversion>:
}

void start_adc_conversion(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); // Seleccionar canal
 250:	ec e7       	ldi	r30, 0x7C	; 124
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 64       	ori	r24, 0x40	; 64
 266:	80 83       	st	Z, r24
 268:	08 95       	ret

0000026a <get_adc_result>:
}

uint16_t get_adc_result() {
	while (ADCSRA & (1 << ADSC)); // Esperar a que termine la conversión
 26a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 26e:	86 fd       	sbrc	r24, 6
 270:	fc cf       	rjmp	.-8      	; 0x26a <get_adc_result>
	return ADC;
 272:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 276:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 27a:	08 95       	ret

0000027c <read_all_sensors>:

uint16_t* read_all_sensors() {
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
	static uint16_t sensor_values[NUM_SENSORS];
	for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <read_all_sensors+0x26>
		start_adc_conversion(i);
 286:	81 2f       	mov	r24, r17
 288:	0e 94 28 01 	call	0x250	; 0x250 <start_adc_conversion>
		sensor_values[i] = get_adc_result();
 28c:	c1 2f       	mov	r28, r17
 28e:	d0 e0       	ldi	r29, 0x00	; 0
 290:	0e 94 35 01 	call	0x26a	; 0x26a <get_adc_result>
 294:	cc 0f       	add	r28, r28
 296:	dd 1f       	adc	r29, r29
 298:	c6 5f       	subi	r28, 0xF6	; 246
 29a:	de 4f       	sbci	r29, 0xFE	; 254
 29c:	99 83       	std	Y+1, r25	; 0x01
 29e:	88 83       	st	Y, r24
	return ADC;
}

uint16_t* read_all_sensors() {
	static uint16_t sensor_values[NUM_SENSORS];
	for (uint8_t i = 0; i < NUM_SENSORS; i++) {
 2a0:	1f 5f       	subi	r17, 0xFF	; 255
 2a2:	16 30       	cpi	r17, 0x06	; 6
 2a4:	80 f3       	brcs	.-32     	; 0x286 <read_all_sensors+0xa>
		start_adc_conversion(i);
		sensor_values[i] = get_adc_result();
	}
	return sensor_values;
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
